/*lab2.cpp
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1. –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∏ —Ç–∏–ø–∞ —Ü–∏–∫–ª–æ–≤ (—Ç—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏).
- –ù–∞–π—Ç–∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤–≤–æ–¥–∏–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª.

–ó–∞–¥–∞–Ω–∏–µ ‚Ññ2.
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ k ‚Äì –æ–π. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ Count_Pos (number) (—Å–º –ø—Ä–∏–º–µ—Ä –¥–∞–ª—å—à–µ –ø–æ —Ç–µ–∫—Å—Ç—É).
- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 182764125216343‚Ä¶, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–∏—Å–∞–Ω—ã –ø–æ–¥—Ä—è–¥ –∫—É–±—ã –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
*/

#include <iostream>
// –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è INT_MAX
#include <climits>
#include <math.h>

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–∏–∫–ª–∞ for
// TODO: —Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ @find_min_with_while
int find_min_with_for()
{
    int num, min_num = INT_MAX;
    int count;
    std::cout << "length num find_min_with_for: ";
    std::cin >> count;
    for (int i = 0; i < count; i++)
    {
        std::cout << "enter number find_min_with_for" << i + 1 << ": ";
        std::cin >> num;
        if (num < min_num)
        {
            min_num = num;
        }
    }
    return min_num;
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–∏–∫–ª–∞ while
int find_min_with_while()
{
    int num, min_num = INT_MAX;
    int count, i = 0;
    std::cout << "length num find_min_with_while: ";
    std::cin >> count;
    // –µ–±–∞—à–∏–º –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ i –º–µ–Ω—å—à–µ —á–µ–º count
    while (i < count)
    {
        std::cout << "enter number find_min_with_while" << i + 1 << ": ";
        // –≤–≤–æ–¥–∏–º —á–∏—Å–ª–∞ -> –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞
        std::cin >> num;
        if (num < min_num)
        {
            min_num = num;
        }
        i++;
    }
    // —Ä–µ—Ç–µ—Ä–Ω —Ä—ç–∑–∑–∑–∑–∑–∑–∑–∑–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–ª–ª–ª–ª–ª–ª–ª–ª—Ç—Ç—Ç kekw
    return min_num;
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–∏–∫–ª–∞ do-while
int find_min_with_do_while()
{
    int num, min_num = INT_MAX;
    // cont ==0 ,–Ω—É —ç—Ç –ø–æ–Ω—è—Ç–Ω–æ
    int count, i = 0;
    std::cout << "length find_min_with_do_while: ";
    std::cin >> count;
    // –¥—Ä–æ—á–∏–º do while –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 10 –º-–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
    do
    {
        std::cout << "enter number find_min_with_do_while " << i + 1 << ": ";
        std::cin >> num;
        if (num < min_num)
        {
            min_num = num;
        }
        i++;
        // —Ç—É—Ç –∫–∞–∫ —É –¥–µ–≤–æ—á–µ–∫ —Ä–µ–¥—Ñ–ª–∞–≥ üö©
    } while (i < count);
    // –Ω–∞ –≤—ã—Ö–æ–¥–µ –≤—ã–ø–ª–µ–≤—ã–≤–∞–µ–º min_num =`<
    return min_num;
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ
int count_digits(int number)
{
    int count = 0;
    // —Ç–∞–∂–µ –∑–∞–ª—É–ø–∞ —Ç–æ–ª—å–∫–æ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ ü§Æ
    while (number != 0)
    {
        number /= 10;
        count++;
    }
    // —Ä–µ—Ç–µ—Ä–Ω –∫–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞—É—É—É—É—É—É—É—É—É—É—É—É—É—É—É–Ω–Ω–Ω–Ω–Ω–Ω–Ω–Ω–Ω–Ω–Ω–Ω–Ω–Ω–Ω—Ç—Ç—Ç—Ç—Ç—Ç—Ç—Ç—Ç—Ç—Ç—Ç—Ç—Ç—Ç—Ç ,,/,,
    return count;
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ k-–æ–π
void print_sequence_digits(int k)
{
    // –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
    int n = 1;
    int count = 0;
    int digit_count = 0;

    // –¥—É–º–∞–µ—à—å —Å–∞–º–æ–µ —Å—Ç—Ä–∞—à–Ω–æ–µ —à—Ç–∞–Ω—ã –æ–±–æ—Å—Ä–∞—Ç—å—Å—è ?????? —Ö—É–π  >>> if –≤ for –≤ while  —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–∞–ª –ø–∏–∑–¥—ã
    // while -> –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç k
    while (count < k)
    {
        int cube = n * n * n;
        digit_count = count_digits(cube);

        // –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä–µ –∫—É–±–∞, –Ω–∞—á–∏–Ω–∞—è —Å —Å—Ç–∞—Ä—à–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
        for (int i = 0; i < digit_count; i++)
        {
            if (count == k)
            {
                break;
            }
            int digit = (cube / static_cast<int>(std::pow(10, digit_count - i - 1))) % 10;
            std::cout << digit << " ";
            // count –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è k -> –ª–∏–≤–∞–µ–º —Å —Ü–∏–∫–ª–∞
            count++;
        }
        n++;
    }
}

int main()
{
    // –ù–æ–º–µ—Ä —Ü–∏—Ñ—Ä—ã –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    int k;
    std::cout << "Enter number k: ";
    std::cin >> k;
    // –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ k-–æ–π
    std::cout << "Sequence digits to " << k << " : ";
    print_sequence_digits(k);
    std::cout << std::endl;

    std::cout << "result find_min_with_for() -> for: min number: " << find_min_with_for() << std::endl;
    std::cout << "result find_min_with_while() -> while: min number: " << find_min_with_while() << std::endl;
    std::cout << "result find_min_with_do_while -> do-while: min number: " << find_min_with_do_while() << std::endl;
    return 0;
}
