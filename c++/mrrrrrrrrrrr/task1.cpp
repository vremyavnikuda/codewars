/*
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1.–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª–æ–µ k, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–ª–µ–¥—É–µ—Ç k —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –≤–≤–æ–¥–∞. –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏–∫–ª for.
 –ù–∞–π—Ç–∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤–≤–æ–¥–∏–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª.


–ó–∞–¥–∞–Ω–∏–µ ‚Ññ2.
 –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ k ‚Äì –æ–π. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ Count_Pos (number) (—Å–º –ø—Ä–∏–º–µ—Ä –¥–∞–ª—å—à–µ –ø–æ —Ç–µ–∫—Å—Ç—É). –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏–∫–ª while –∏–ª–∏ do / while.
- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 182764125216343‚Ä¶, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–∏—Å–∞–Ω—ã –ø–æ–¥—Ä—è–¥ –∫—É–±—ã –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
*/

#include <iostream>
#include <climits>
#include <math.h>

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–∏–∫–ª–∞ for
int find_min_with_for()
{
    int num, min_num;
    int count;
    std::cout << "length num find_min_with_for: ";
    std::cin >> count;
    min_num = count;
    for (int i = 1; i <= count; i++)
    {
        std::cout << "enter number find_min_with_for" << i << ": ";
        std::cin >> num;
        if (num < min_num)
        {
            min_num = num;
        }
    }
    std::cout << "Min number is: ";
    return min_num;
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ
int Count_Pos(long number)
{
    int count = 0;
    while (number != 0)
    {
        number /= 10;
        count++;
    }
    return count;
}
void PrintCubesToK(int k)
{

    std::string stroka = ""; // —Å–∫–ª–∞–¥ –¥–ª—è –∫—É–±–∏–∫–æ–≤ —Ü–∏—Ñ–µ—Ä–æ–∫
    int n = 1;               // –Ω—É–∂–Ω—ã –∫—É–±—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–µ—Å–µ–ª, 0 - –Ω–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ üôÅ

    while (stroka.length() < k)
    {
        long cube = pow(n, 3);

        stroka += std::to_string(cube);
    }
    std::cout << stroka.substr(0) << std::endl;
}

int main()
{
    // –ù–æ–º–µ—Ä —Ü–∏—Ñ—Ä—ã –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    std::cout << "Number I: Find min number: " << std::endl;
    std::cout << find_min_with_for() << std::endl;
    std::cout << std::endl;
    int k;
    std::cout << "Number II: Cuby : " << std::endl;
    std::cout << "Enter k: ";
    std::cin >> k;

    PrintCubesToK(k);

    return 0;
}
