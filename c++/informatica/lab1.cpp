#include <iostream>
#include <string>

// Функция определения четверти с использованием условного оператора
std::string determineQuadrantIf(double x, double y)
{
    if (x > 0 && y > 0)
    {
        // Точка находится в первой четверти
        return "Точка находится в первой четверти.\n";
    }
    else if (x < 0 && y > 0)
    {
        // Точка находится во второй четверти
        return "Точка находится во второй четверти.\n";
    }
    else if (x < 0 && y < 0)
    {
        // Точка находится в третьей четверти
        return "Точка находится в третьей четверти.\n";
    }
    else if (x > 0 && y < 0)
    {
        // Точка находится в четвертой четверти
        return "Точка находится в четвертой четверти.\n";
    }
    else
    {
        // Точка находится на одной из осей (не должно быть при условии x * y != 0)
        return "Точка находится на одной из осей, что не соответствует условию (x * y != 0).\n";
    }
}

// Функция определения четверти с использованием тернарного оператора
std::string determineQuadrantTernary(double x, double y)
{
    // Используем тернарный оператор для определения четверти
    return (x > 0 && y > 0) ? "Точка находится в первой четверти.\n" : (x < 0 && y > 0) ? "Точка находится во второй четверти.\n"
                                                                   : (x < 0 && y < 0)   ? "Точка находится в третьей четверти.\n"
                                                                   : (x > 0 && y < 0)   ? "Точка находится в четвертой четверти.\n"
                                                                                        : "Точка находится на одной из осей, что не соответствует условию (x * y != 0).\n";
}

int main()
{
    double x, y;
    std::cout << "Введите координаты x и y: ";
    std::cin >> x >> y;
    std::cout << "Результат с использованием условного оператора:\n";
    // Вызов функции с условным оператором
    std::cout << determineQuadrantIf(x, y);
    std::cout << "Результат с использованием тернарного оператора:\n";
    // Вызов функции с тернарным оператором
    std::cout << determineQuadrantTernary(x, y);
    return 0;
}
